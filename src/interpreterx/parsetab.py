
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEBEGIN DIVIDE END EQUALS ID INTEGER LET LPAREN MINUS PLUS PRINT RPAREN SEMI_COLON STRING TIMESprog : BEGIN props ENDprog : BEGIN error ENDprops : sec_props\n             | emptysec_props : sec_props statement\n                 | statementstatement : command SEMI_COLONcommand : PRINT LPAREN expr RPARENcommand : LET ID EQUALS exprexpr : INTEGERexpr : STRINGexpr : IDexpr : expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE expr\n    empty :'
    
_lr_action_items = {'BEGIN':([0,],[2,]),'$end':([1,11,12,],[0,-1,-2,]),'error':([2,],[4,]),'END':([2,3,4,5,6,7,13,14,],[-17,11,12,-3,-4,-6,-5,-7,]),'PRINT':([2,5,7,13,14,],[9,9,-6,-5,-7,]),'LET':([2,5,7,13,14,],[10,10,-6,-5,-7,]),'SEMI_COLON':([8,18,19,20,22,27,28,29,30,31,],[14,-10,-11,-12,-8,-9,-13,-14,-15,-16,]),'LPAREN':([9,],[15,]),'ID':([10,15,21,23,24,25,26,],[16,20,20,20,20,20,20,]),'INTEGER':([15,21,23,24,25,26,],[18,18,18,18,18,18,]),'STRING':([15,21,23,24,25,26,],[19,19,19,19,19,19,]),'EQUALS':([16,],[21,]),'RPAREN':([17,18,19,20,28,29,30,31,],[22,-10,-11,-12,-13,-14,-15,-16,]),'PLUS':([17,18,19,20,27,28,29,30,31,],[23,-10,-11,-12,23,-13,-14,-15,-16,]),'MINUS':([17,18,19,20,27,28,29,30,31,],[24,-10,-11,-12,24,-13,-14,-15,-16,]),'TIMES':([17,18,19,20,27,28,29,30,31,],[25,-10,-11,-12,25,25,25,-15,-16,]),'DIVIDE':([17,18,19,20,27,28,29,30,31,],[26,-10,-11,-12,26,26,26,-15,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'prog':([0,],[1,]),'props':([2,],[3,]),'sec_props':([2,],[5,]),'empty':([2,],[6,]),'statement':([2,5,],[7,13,]),'command':([2,5,],[8,8,]),'expr':([15,21,23,24,25,26,],[17,27,28,29,30,31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> prog","S'",1,None,None,None),
  ('prog -> BEGIN props END','prog',3,'p_prog','xparser.py',22),
  ('prog -> BEGIN error END','prog',3,'p_prog_error','xparser.py',29),
  ('props -> sec_props','props',1,'p_props','xparser.py',39),
  ('props -> empty','props',1,'p_props','xparser.py',40),
  ('sec_props -> sec_props statement','sec_props',2,'p_sec_props','xparser.py',47),
  ('sec_props -> statement','sec_props',1,'p_sec_props','xparser.py',48),
  ('statement -> command SEMI_COLON','statement',2,'p_prop','xparser.py',56),
  ('command -> PRINT LPAREN expr RPAREN','command',4,'p_command_print','xparser.py',61),
  ('command -> LET ID EQUALS expr','command',4,'p_command_let','xparser.py',66),
  ('expr -> INTEGER','expr',1,'p_expr_integer','xparser.py',71),
  ('expr -> STRING','expr',1,'p_expr_string','xparser.py',76),
  ('expr -> ID','expr',1,'p_expr_id','xparser.py',81),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','xparser.py',86),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','xparser.py',87),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binary','xparser.py',88),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binary','xparser.py',89),
  ('empty -> <empty>','empty',0,'p_empty','xparser.py',95),
]
